import Foundation
import shared

final class PlatformFirebaseCrashlyticsImpl: PlatformFirebaseCrashlytics {

    // TODO uncomment when FirebaseCrashlytics is added as dependency
    // private final let crashlytics: Crashlytics = Crashlytics.crashlytics()

    func logMessage(message: String) {
        // TODO uncomment when FirebaseCrashlytics is added as dependency
        // crashlytics.log(message)
    }

    func sendNonFatalException(nsException: NSException) {
        // TODO uncomment when FirebaseCrashlytics is added as dependency
        // crashlytics.record(exceptionModel: nsException.asNonFatalExceptionModel())
    }

    func raiseFatalException(nsException: NSException) {
        // In case of fatal exception, we just raise it and native Crashlytics SDK will do the rest,
        // as provided `nsException` is already configured by Kotlin to provide
        // meaningful output in Crashlytics console
         nsException.raise()
    }
}

// TODO uncomment when FirebaseCrashlytics is added as dependency
// extension NSException {
//
//    /**
//     Converts the `NSException` generated by Kotlin to `ExceptionModel` used by Fireabse Crashlytics to log non-fatals.
//     */
//    func asNonFatalExceptionModel() -> ExceptionModel {
//        let exceptionModel = ExceptionModel(
//            name: self.name.rawValue,
//            reason: self.reason ?? ""
//        )
//
//        exceptionModel.stackTrace = self.callStackReturnAddresses.map { address in
//            StackFrame(address: address.uintValue)
//        }
//
//        return exceptionModel
//    }
// }
