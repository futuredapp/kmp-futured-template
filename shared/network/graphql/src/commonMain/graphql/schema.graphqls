type Query {
  """
  Get a specific character by ID
  """
  character("" id: ID!): Character

  """
  Get the list of all characters
  """
  characters("" page: Int, "" filter: FilterCharacter): Characters

  """
  Get a list of characters selected by ids
  """
  charactersByIds("" ids: [ID!]!): [Character]

  """
  Get a specific locations by ID
  """
  location("" id: ID!): Location

  """
  Get the list of all locations
  """
  locations("" page: Int, "" filter: FilterLocation): Locations

  """
  Get a list of locations selected by ids
  """
  locationsByIds("" ids: [ID!]!): [Location]

  """
  Get a specific episode by ID
  """
  episode("" id: ID!): Episode

  """
  Get the list of all episodes
  """
  episodes("" page: Int, "" filter: FilterEpisode): Episodes

  """
  Get a list of episodes selected by ids
  """
  episodesByIds("" ids: [ID!]!): [Episode]
}

"""
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
"""
scalar ID

type Character {
  """
  The id of the character.
  """
  id: ID

  """
  The name of the character.
  """
  name: String

  """
  The status of the character ('Alive', 'Dead' or 'unknown').
  """
  status: String

  """
  The species of the character.
  """
  species: String

  """
  The type or subspecies of the character.
  """
  type: String

  """
  The gender of the character ('Female', 'Male', 'Genderless' or 'unknown').
  """
  gender: String

  """
  The character's origin location
  """
  origin: Location

  """
  The character's last known location
  """
  location: Location

  """
  Link to the character's image.
  All images are 300x300px and most are medium shots or portraits since they are intended to be used as avatars.
  """
  image: String

  """
  Episodes in which this character appeared.
  """
  episode: [Episode]!

  """
  Time at which the character was created in the database.
  """
  created: String
}

"""
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
"""
scalar String

type Location {
  """
  The id of the location.
  """
  id: ID

  """
  The name of the location.
  """
  name: String

  """
  The type of the location.
  """
  type: String

  """
  The dimension in which the location is located.
  """
  dimension: String

  """
  List of characters who have been last seen in the location.
  """
  residents: [Character]!

  """
  Time at which the location was created in the database.
  """
  created: String
}

type Episode {
  """
  The id of the episode.
  """
  id: ID

  """
  The name of the episode.
  """
  name: String

  """
  The air date of the episode.
  """
  air_date: String

  """
  The code of the episode.
  """
  episode: String

  """
  List of characters who have been seen in the episode.
  """
  characters: [Character]!

  """
  Time at which the episode was created in the database.
  """
  created: String
}

"""
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.
"""
scalar Int

input FilterCharacter {
  name: String

  status: String

  species: String

  type: String

  gender: String
}

type Characters {
  info: Info

  results: [Character]
}

type Info {
  """
  The length of the response.
  """
  count: Int

  """
  The amount of pages.
  """
  pages: Int

  """
  Number of the next page (if it exists)
  """
  next: Int

  """
  Number of the previous page (if it exists)
  """
  prev: Int
}

input FilterLocation {
  name: String

  type: String

  dimension: String
}

type Locations {
  info: Info

  results: [Location]
}

input FilterEpisode {
  name: String

  episode: String
}

type Episodes {
  info: Info

  results: [Episode]
}

"""
A GraphQL Schema defines the capabilities of a GraphQL server. It exposes all available types and directives on the server, as well as the entry points for query, mutation, and subscription operations.
"""
type __Schema {
  """
  A list of all types supported by this server.
  """
  types: [__Type!]!

  """
  The type that query operations will be rooted at.
  """
  queryType: __Type!

  """
  If this server supports mutation, the type that mutation operations will be rooted at.
  """
  mutationType: __Type

  """
  If this server support subscription, the type that subscription operations will be rooted at.
  """
  subscriptionType: __Type

  """
  A list of all directives supported by this server.
  """
  directives: [__Directive!]!
}

"""
The fundamental unit of any GraphQL Schema is the type. There are many kinds of types in GraphQL as represented by the `__TypeKind` enum.

Depending on the kind of a type, certain fields describe information about that type. Scalar types provide no information beyond a name and description, while Enum types provide their values. Object and Interface types provide the fields they describe. Abstract types, Union and Interface, provide the Object types possible at runtime. List and NonNull types compose other types.
"""
type __Type {
  kind: __TypeKind!

  name: String

  description: String

  fields(includeDeprecated: Boolean = false): [__Field!]

  interfaces: [__Type!]

  possibleTypes: [__Type!]

  enumValues(includeDeprecated: Boolean = false): [__EnumValue!]

  inputFields: [__InputValue!]

  ofType: __Type
}

"""
An enum describing what kind of type a given `__Type` is.
"""
enum __TypeKind {
  """
  Indicates this type is a scalar.
  """
  SCALAR

  """
  Indicates this type is an object. `fields` and `interfaces` are valid fields.
  """
  OBJECT

  """
  Indicates this type is an interface. `fields` and `possibleTypes` are valid fields.
  """
  INTERFACE

  """
  Indicates this type is a union. `possibleTypes` is a valid field.
  """
  UNION

  """
  Indicates this type is an enum. `enumValues` is a valid field.
  """
  ENUM

  """
  Indicates this type is an input object. `inputFields` is a valid field.
  """
  INPUT_OBJECT

  """
  Indicates this type is a list. `ofType` is a valid field.
  """
  LIST

  """
  Indicates this type is a non-null. `ofType` is a valid field.
  """
  NON_NULL
}

"""
The `Boolean` scalar type represents `true` or `false`.
"""
scalar Boolean

"""
Object and Interface types are described by a list of Fields, each of which has a name, potentially a list of arguments, and a return type.
"""
type __Field {
  name: String!

  description: String

  args: [__InputValue!]!

  type: __Type!

  isDeprecated: Boolean!

  deprecationReason: String
}

"""
Arguments provided to Fields or Directives and the input fields of an InputObject are represented as Input Values which describe their type and optionally a default value.
"""
type __InputValue {
  name: String!

  description: String

  type: __Type!

  """
  A GraphQL-formatted string representing the default value for this input value.
  """
  defaultValue: String
}

"""
One possible value for a given Enum. Enum values are unique values, not a placeholder for a string or numeric value. However an Enum value is returned in a JSON response as a string.
"""
type __EnumValue {
  name: String!

  description: String

  isDeprecated: Boolean!

  deprecationReason: String
}

"""
A Directive provides a way to describe alternate runtime execution and type validation behavior in a GraphQL document.

In some cases, you need to provide options to alter GraphQL's execution behavior in ways field arguments will not suffice, such as conditionally including or skipping a field. Directives provide this by describing additional information to the executor.
"""
type __Directive {
  name: String!

  description: String

  locations: [__DirectiveLocation!]!

  args: [__InputValue!]!
}

"""
A Directive can be adjacent to many parts of the GraphQL language, a __DirectiveLocation describes one such possible adjacencies.
"""
enum __DirectiveLocation {
  """
  Location adjacent to a query operation.
  """
  QUERY

  """
  Location adjacent to a mutation operation.
  """
  MUTATION

  """
  Location adjacent to a subscription operation.
  """
  SUBSCRIPTION

  """
  Location adjacent to a field.
  """
  FIELD

  """
  Location adjacent to a fragment definition.
  """
  FRAGMENT_DEFINITION

  """
  Location adjacent to a fragment spread.
  """
  FRAGMENT_SPREAD

  """
  Location adjacent to an inline fragment.
  """
  INLINE_FRAGMENT

  """
  Location adjacent to a variable definition.
  """
  VARIABLE_DEFINITION

  """
  Location adjacent to a schema definition.
  """
  SCHEMA

  """
  Location adjacent to a scalar definition.
  """
  SCALAR

  """
  Location adjacent to an object type definition.
  """
  OBJECT

  """
  Location adjacent to a field definition.
  """
  FIELD_DEFINITION

  """
  Location adjacent to an argument definition.
  """
  ARGUMENT_DEFINITION

  """
  Location adjacent to an interface definition.
  """
  INTERFACE

  """
  Location adjacent to a union definition.
  """
  UNION

  """
  Location adjacent to an enum definition.
  """
  ENUM

  """
  Location adjacent to an enum value definition.
  """
  ENUM_VALUE

  """
  Location adjacent to an input object type definition.
  """
  INPUT_OBJECT

  """
  Location adjacent to an input object field definition.
  """
  INPUT_FIELD_DEFINITION
}

enum CacheControlScope {
  PUBLIC

  PRIVATE
}

"""
The `Upload` scalar type represents a file upload.
"""
scalar Upload

directive @cacheControl ("" maxAge: Int, "" scope: CacheControlScope) on FIELD_DEFINITION|OBJECT|INTERFACE

"""
Directs the executor to skip this field or fragment when the `if` argument is true.
"""
directive @skip ("Skipped when true." if: Boolean!) on FIELD|FRAGMENT_SPREAD|INLINE_FRAGMENT

"""
Directs the executor to include this field or fragment only when the `if` argument is true.
"""
directive @include ("Included when true." if: Boolean!) on FIELD|FRAGMENT_SPREAD|INLINE_FRAGMENT

"""
Marks an element of a GraphQL schema as no longer supported.
"""
directive @deprecated ("Explains why this element was deprecated, usually also including a suggestion for how to access supported similar data. Formatted using the Markdown syntax (as specified by [CommonMark](https:\/\/commonmark.org\/)." reason: String = "No longer supported") on FIELD_DEFINITION|ENUM_VALUE

schema {
  query: Query
}
